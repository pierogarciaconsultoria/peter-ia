
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Configuração segura - usar variáveis de ambiente
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_ANON_KEY;

// Validação crítica de segurança
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error('SECURITY ERROR: Missing Supabase credentials');
  throw new Error('Missing required Supabase environment variables');
}

// Validação adicional de formato das credenciais
if (!SUPABASE_URL.includes('supabase.co') && !SUPABASE_URL.includes('localhost')) {
  console.error('SECURITY ERROR: Invalid Supabase URL format');
  throw new Error('Invalid Supabase URL format');
}

if (!SUPABASE_PUBLISHABLE_KEY.startsWith('eyJ')) {
  console.error('SECURITY ERROR: Invalid Supabase key format');
  throw new Error('Invalid Supabase publishable key format');
}

// Log de segurança (apenas em desenvolvimento)
if (process.env.NODE_ENV === 'development') {
  console.log('Supabase client initialized with environment variables');
}

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: false,
      storage: localStorage,
      flowType: 'pkce'
    },
    db: {
      schema: 'public'
    }
  }
);

// Helper function to check if admin account exists - REMOVIDO bypass inseguro
export const confirmAdminEmail = async (email: string) => {
  try {
    console.log("Checking admin account:", email);
    
    // Verificação segura sem bypass
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      return { success: false, error: new Error("User not authenticated") };
    }
    
    // Verificar se o usuário atual tem permissões de admin
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('is_super_admin, is_company_admin')
      .eq('id', user.id)
      .single();
    
    if (profileError || !profile) {
      return { success: false, error: new Error("Unable to verify admin status") };
    }
    
    if (!profile.is_super_admin && !profile.is_company_admin) {
      return { success: false, error: new Error("Insufficient permissions") };
    }
    
    return { success: true, data: user };
  } catch (error) {
    console.error("Unexpected error checking admin account:", error);
    return { success: false, error };
  }
};
