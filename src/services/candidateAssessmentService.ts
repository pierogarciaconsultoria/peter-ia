
import { supabase } from "@/integrations/supabase/client";
import { CandidateAssessment, AssessmentLink, AssessmentResponse, AssessmentQuestion } from "@/types/recruitment";
import { toast } from "sonner";

export const createAssessment = async (assessment: Omit<CandidateAssessment, 'id' | 'created_at' | 'updated_at'>) => {
  try {
    console.log("Creating assessment:", assessment);
    
    // Convert the AssessmentQuestion[] to a JSON structure that Supabase can handle
    const assessmentData = {
      ...assessment,
      questions: Array.isArray(assessment.questions) 
        ? JSON.stringify(assessment.questions) 
        : assessment.questions
    };

    const { data, error } = await supabase
      .from('candidate_assessments')
      .insert(assessmentData)
      .select()
      .single();

    if (error) {
      console.error("Database error creating assessment:", error);
      throw error;
    }
    
    // Convert the returned data back to our typed structure
    const parsedData = {
      ...data,
      questions: typeof data.questions === 'string' 
        ? JSON.parse(data.questions) 
        : Array.isArray(data.questions) 
          ? data.questions
          : []
    };
    
    console.log("Assessment created successfully:", parsedData);
    return parsedData as CandidateAssessment;
  } catch (error: any) {
    console.error("Error creating assessment:", error);
    toast.error("Erro ao criar avaliação");
    return null;
  }
};

export const getAssessments = async (): Promise<CandidateAssessment[]> => {
  try {
    console.log("Fetching assessments from database");
    
    const { data, error } = await supabase
      .from('candidate_assessments')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error("Database error fetching assessments:", error);
      throw error;
    }
    
    // Convert the JSON string data back to our typed structure
    const parsedAssessments = (data || []).map(item => {
      let questions = [];
      
      try {
        // Handle both string and direct JSON object cases
        if (typeof item.questions === 'string') {
          questions = JSON.parse(item.questions);
        } else if (Array.isArray(item.questions)) {
          questions = item.questions;
        }
      } catch (e) {
        console.error("Error parsing questions:", e);
        questions = [];
      }
      
      return {
        ...item,
        questions
      };
    });
    
    console.log("Assessments fetched successfully:", parsedAssessments);
    return parsedAssessments as CandidateAssessment[];
  } catch (error: any) {
    console.error("Error fetching assessments:", error);
    return [];
  }
};

export const generateAssessmentLink = async (
  assessment_id: string,
  candidate_name: string,
  candidate_email: string,
  recruitment_process_id?: string
): Promise<string> => {
  try {
    console.log("Generating assessment link for:", { assessment_id, candidate_name, candidate_email });
    
    // Note: token is generated by database trigger, so we don't need to provide it here.
    const linkData = {
      assessment_id,
      candidate_name,
      candidate_email,
      recruitment_process_id: recruitment_process_id || null
    };

    // The DB trigger will set the token value
    const { data, error } = await supabase
      .from('candidate_assessment_links')
      .insert(linkData as any) // Use type assertion to bypass the TypeScript error
      .select()
      .single();

    if (error) {
      console.error("Database error generating link:", error);
      throw error;
    }

    console.log("Assessment link generated successfully:", data);
    
    // For now, just return a mock URL - in production this would be a real URL
    const baseUrl = window.location.origin;
    return `${baseUrl}/assessment/${data.token}`;
  } catch (error: any) {
    console.error("Error generating assessment link:", error);
    toast.error("Erro ao gerar link para avaliação");
    
    // Return a mock URL for demonstration purposes
    const baseUrl = window.location.origin;
    return `${baseUrl}/assessment/mock-token-${Date.now()}`;
  }
};

export const validateAssessmentLink = async (token: string): Promise<AssessmentLink | null> => {
  try {
    console.log("Validating assessment link token:", token);
    
    const { data, error } = await supabase
      .from('candidate_assessment_links')
      .select('*, candidate_assessments(*)')
      .eq('token', token)
      .eq('used', false)
      .gt('expires_at', new Date().toISOString())
      .single();

    if (error) {
      console.error("Database error validating link:", error);
      throw error;
    }
    
    // Convert the nested questions JSON to our typed structure
    if (data?.candidate_assessments) {
      let parsedQuestions = [];
      
      try {
        // Handle both string and direct JSON object cases
        if (typeof data.candidate_assessments.questions === 'string') {
          parsedQuestions = JSON.parse(data.candidate_assessments.questions);
        } else if (Array.isArray(data.candidate_assessments.questions)) {
          parsedQuestions = data.candidate_assessments.questions;
        }
        
        // We need to assign back in a way that TypeScript accepts
        data.candidate_assessments = {
          ...data.candidate_assessments,
          questions: parsedQuestions
        };
      } catch (e) {
        console.error("Error parsing nested questions:", e);
        data.candidate_assessments.questions = [];
      }
    }
    
    console.log("Assessment link validated successfully:", data);
    return data as AssessmentLink;
  } catch (error) {
    console.error("Error validating assessment link:", error);
    return null;
  }
};

export const submitAssessmentResponse = async (
  linkId: string,
  response: Omit<AssessmentResponse, 'id' | 'submitted_at'>
): Promise<boolean> => {
  try {
    console.log("Submitting assessment response:", { linkId, response });

    const { error: responseError } = await supabase
      .from('candidate_assessment_responses')
      .insert(response);

    if (responseError) {
      console.error("Database error submitting response:", responseError);
      throw responseError;
    }

    // Mark link as used
    const { error: linkError } = await supabase
      .from('candidate_assessment_links')
      .update({ used: true })
      .eq('id', linkId);

    if (linkError) {
      console.error("Database error updating link status:", linkError);
      throw linkError;
    }

    console.log("Assessment response submitted successfully");
    return true;
  } catch (error) {
    console.error("Error submitting assessment response:", error);
    return false;
  }
};
